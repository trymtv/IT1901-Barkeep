package database;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Database {
	//Database connection parameters
	static final String JDBC_DRIVER = "org.h2.Driver";
	static String DB_URL = "jdbc:h2:./BarKeep/core/src/main/resources/barkeep";
	static final String USER = "sa";
	static final String PASS = "";

	private static Connection conn = null;
	private static Statement stmt = null;

	public static void setDbUrl(String dbUrl) {
		DB_URL = dbUrl;
	}

	//Defining sql statements to not be parsed as text.
	private static final List<String> sqlStatements = new ArrayList<>(
			Arrays.asList(new String[]{"NULL"})
			);


	/**
	 * Opens the connection to the predefined database.
	 */
	//Suppressing warning for no password, since it should not be a password
	@SuppressFBWarnings
	public static void open() throws SQLException, ClassNotFoundException {
		Class.forName(JDBC_DRIVER);
		conn = DriverManager.getConnection(DB_URL, USER, PASS);
		stmt = conn.createStatement();
	}


	/**
	 * Closes the connection to the predefined database.
	 */
	public static void close() throws SQLException {
		if(stmt!=null) stmt.close();
		if(conn!=null) conn.close();
	}

	/**
	 * Inserts the values given in the defined table in the database
	 * given an open connection.
	 * @param table - the table to insert the values into
	 * @param values - the values to be inserted in to the predefined table
	 */
	public static void insert(String table, String... values) throws SQLException {
		for (int i = 0; i < values.length; i++){
			try{
				if (!sqlStatements.contains(values[i]))
					Float.parseFloat(values[i]);
			}catch (Exception e){
				values[i] = "'" + values[i] + "'";
			}
		}

		String sql = "INSERT INTO " + table + " VALUES( " + String.join(",", values) + ")";
		stmt.executeUpdate(sql);
	}


	/**
	 * Deletes a row from the given table with the given condition.
	 * @param table a string of the table to delete from
	 * @param condition the condition to find the rows to delete
	 */
	public static void delete(String table, String condition) throws SQLException {
		stmt.executeUpdate("DELETE FROM " + table + " WHERE " + condition);
	}

	/**
	 * Gets the ResultSet from the database defined by the given sql
	 * statement
	 * @param sql a string of the sql statement to query
	 * @return ResultSet - a ResultSet generated by the given statement
	 */
	public static ResultSet read(String sql) throws SQLException {
		ResultSet rs;
		rs = stmt.executeQuery(sql);
		return rs;
	}

}
